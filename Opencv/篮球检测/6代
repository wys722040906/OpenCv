/*时序信息追踪
添加了 CircleInfo 结构体存储检测结果和得分
实现了时序一致性检查：
限制半径变化范围
限制中心点移动距离
监控得分变化
添加了时序平滑处理：
平滑中心点位置
平滑半径变化
平滑检测得分
4. 改进了可视化：
显示历史轨迹
显示当前得分
这些改进应该能：
减少误检测和抖动
提高检测的稳定性
在目标短暂消失时保持跟踪
提供更平滑的检测结果

HISTORY_SIZE：历史记录长度
MAX_RADIUS_CHANGE_RATIO：允许的半径变化范围
MAX_CENTER_DIST：允许的位移距离
TEMPORAL_SMOOTHING：平滑程度
*/

#include <opencv2/opencv.hpp>
#include <vector>

using namespace cv;
using namespace std;


// 全局参数
struct Params {
    // HSV阈值 - 扩大范围以提高识别率
    int lower_h = 0;    
    int upper_h = 25;   // 扩大到25，覆盖更多橙色
    int lower_s = 43;   // 提高饱和度下限，减少阴影影响
    int upper_s = 255;
    int lower_v = 10;   // 大幅降低明度下限，适应阴影区域
    int upper_v = 255;  // 保持较高的明度上限
    
    // 预处理参数
    int blur_size = 5;
    int clahe_clip = 3;
    int clahe_grid = 8;
    
    // Canny参数 - 适当放宽
    int canny_low = 40;   // 降低下限，捕获更多边缘
    int canny_high = 150;
    
    // 霍夫圆检测参数 - 调整以提高识别率
    int hough_dp = 1;
    int hough_minDist = 100;
    int hough_param1 = 50;
    int hough_param2 = 25;   // 降低阈值，提高检测灵敏度
    int hough_minRadius =30 ;
    int hough_maxRadius = 200;
    
    // 轮廓筛选参数 - 适当放宽
    double min_circularity = 0.5;  // 降低圆度要求
    double min_area = 700;          // 降低最小面积
    double max_area = 120000;       // 略微提高最大面积
} params;

class BasketballDetector {
private:
    Mat frame, hsv, mask, edges;
    vector<vector<Point>> contours;
    vector<Vec4i> hierarchy;
    
    // 创建双区间HSV掩码
    Mat createDoubleMask(const Mat& hsv) {
        Mat mask1, mask2, combined_mask;
        
        // 第一个区间 (0-15)
        inRange(hsv, 
                Scalar(0, params.lower_s, params.lower_v),
                Scalar(params.upper_h, params.upper_s, params.upper_v),
                mask1);
                
        // 第二个区间 (170-180)
        inRange(hsv,
                Scalar(170, params.lower_s, params.lower_v),
                Scalar(180, params.upper_s, params.upper_v),
                mask2);
                
        // 合并两个掩码
        bitwise_or(mask1, mask2, combined_mask);
        return combined_mask;
    }
    
    // 图像预处理
    void preprocess() {
        // 确保 blur_size 为正奇数
        int blur = params.blur_size;
        if (blur % 2 == 0) blur++;
        if (blur < 1) blur = 1;
        
        // 高斯模糊
        GaussianBlur(frame, frame, Size(blur, blur), 0);
        
        // CLAHE增强
        cvtColor(frame, hsv, COLOR_BGR2HSV);
        vector<Mat> channels;
        split(hsv, channels);
        Ptr<CLAHE> clahe = createCLAHE(params.clahe_clip, Size(params.clahe_grid, params.clahe_grid));
        clahe->apply(channels[2], channels[2]);
        merge(channels, hsv);
        
        // 增强CLAHE处理
        Mat lab;
        cvtColor(frame, lab, COLOR_BGR2Lab);
        vector<Mat> lab_planes;
        split(lab, lab_planes);
        
        Mat dst;
        clahe->apply(lab_planes[0], dst);
        dst.copyTo(lab_planes[0]);
        merge(lab_planes, lab);
        
        cvtColor(lab, frame, COLOR_Lab2BGR);
        
        // 创建掩码
        mask = createDoubleMask(hsv);
        
        // 增强形态学处理
        Mat kernel = getStructuringElement(MORPH_ELLIPSE, Size(5, 5));
        Mat kernel_small = getStructuringElement(MORPH_ELLIPSE, Size(3, 3));
        
        // 先进行开运算分离相连区域
        morphologyEx(mask, mask, MORPH_OPEN, kernel_small);
        
        // 然后进行闭运算填充球内部的空洞
        morphologyEx(mask, mask, MORPH_CLOSE, kernel);
        
        // 添加额外的边缘处理
        Mat edge_mask;
        Sobel(mask, edge_mask, CV_8U, 1, 1);
        threshold(edge_mask, edge_mask, 30, 255, THRESH_BINARY);
        
        // 确保edge_mask与mask大小相同
        if (edge_mask.size() != mask.size()) {
            resize(edge_mask, edge_mask, mask.size());
        }
        
        // 将边缘信息与主掩码结合
        mask = mask & ~edge_mask;
        
        // Canny边缘检测
        Canny(mask, edges, params.canny_low, params.canny_high);
    }
    
    // 检测圆形
    vector<Vec3f> detectCircles() {
        vector<Vec3f> circles;
        // 确保参数为正数
        int param1 = max(1, params.hough_param1);
        int param2 = max(1, params.hough_param2);
        
        HoughCircles(edges, circles, HOUGH_GRADIENT,
                    params.hough_dp,
                    params.hough_minDist,
                    param1,  // 使用保护后的参数
                    param2,  // 使用保护后的参数
                    params.hough_minRadius,
                    params.hough_maxRadius);
        return circles;
    }
    
    // 特征权重结构体
    struct FeatureWeights {
        double area_weight = 1.0;
        double circularity_weight = 2.0;
        double color_weight = 1.5;
        double gradient_weight = 1.0;
        double final_threshold = 3.5;
    } weights;

    double normalizeScore(double value, double min_val, double max_val) {
        return (value - min_val) / (max_val - min_val);
    }

    // 计算颜色特征得分
    double calculateColorScore(const vector<Point>& contour) {
        Rect boundRect = boundingRect(contour);
        boundRect &= Rect(0, 0, frame.cols, frame.rows);
        if (boundRect.area() <= 0) return 0.0;

        Mat roi = frame(boundRect);
        Mat hsv_roi;
        cvtColor(roi, hsv_roi, COLOR_BGR2HSV);

        // 计算HSV直方图
        int h_bins = 30;
        float h_ranges[] = {0, 180};
        const float* ranges[] = {h_ranges};
        int channels[] = {0};
        Mat hist;
        calcHist(&hsv_roi, 1, channels, Mat(), hist, 1, &h_bins, ranges);
        normalize(hist, hist, 0, 1, NORM_MINMAX);

        // 计算橙色区域得分
        double color_score = 0;
        for (int i = 0; i < h_bins; i++) {
            float hue = i * 180.0f / h_bins;
            if (hue >= params.lower_h && hue <= params.upper_h) {
                color_score += hist.at<float>(i);
            }
        }
        return min(1.0, color_score);
    }

    // 计算梯度特征得分
    double calculateGradientScore(const vector<Point>& contour) {
        Rect boundRect = boundingRect(contour);
        boundRect &= Rect(0, 0, frame.cols, frame.rows);
        if (boundRect.area() <= 0) return 0.0;

        Mat roi = frame(boundRect);
        Mat gray_roi;
        cvtColor(roi, gray_roi, COLOR_BGR2GRAY);
        
        Mat gradient_x, gradient_y;
        Sobel(gray_roi, gradient_x, CV_32F, 1, 0);
        Sobel(gray_roi, gradient_y, CV_32F, 0, 1);
        
        Mat gradient_mag;
        magnitude(gradient_x, gradient_y, gradient_mag);
        
        // 计算梯度一致性得分
        Scalar mean_grad = mean(gradient_mag);
        return min(1.0, mean_grad[0] / 255.0);
    }

    // 时序跟踪相关结构和参数
    struct CircleInfo {
        Point2f center;
        float radius;
        double score;
        bool valid;
        
        CircleInfo() : valid(false), score(0) {}
        CircleInfo(Point2f c, float r, double s) 
            : center(c), radius(r), score(s), valid(true) {}
    };
    
    // 历史记录参数
    static const int HISTORY_SIZE = 5;
    vector<CircleInfo> history;
    
    // 时序过滤参数
    const float MAX_RADIUS_CHANGE_RATIO = 0.3;    // 允许的最大半径变化比例
    const float MAX_CENTER_DIST = 50.0;           // 允许的最大中心点移动距离
    const float TEMPORAL_SMOOTHING = 0.7;         // 时序平滑因子
    
    // 检查新检测结果的时序连续性
    bool isTemporallyConsistent(const Point2f& center, float radius, double score) {
        if (history.empty() || !history.back().valid) {
            return true;
        }
        
        const CircleInfo& last = history.back();
        
        // 检查半径变化
        float radiusChange = abs(radius - last.radius) / last.radius;
        if (radiusChange > MAX_RADIUS_CHANGE_RATIO) {
            return false;
        }
        
        // 检查中心点移动
        float centerDist = norm(center - last.center);
        if (centerDist > MAX_CENTER_DIST) {
            return false;
        }
        
        // 检查得分变化
        if (score < last.score * 0.5) {  // 得分突然降低太多
            return false;
        }
        
        return true;
    }
    
    // 更新历史记录
    void updateHistory(const CircleInfo& newCircle) {
        if (history.size() >= HISTORY_SIZE) {
            history.erase(history.begin());
        }
        history.push_back(newCircle);
    }
    
    // 时序平滑处理
    CircleInfo smoothDetection(const Point2f& center, float radius, double score) {
        if (history.empty() || !history.back().valid) {
            return CircleInfo(center, radius, score);
        }
        
        const CircleInfo& last = history.back();
        
        // 平滑中心点
        Point2f smoothedCenter;
        smoothedCenter.x = last.center.x * TEMPORAL_SMOOTHING + 
                          center.x * (1 - TEMPORAL_SMOOTHING);
        smoothedCenter.y = last.center.y * TEMPORAL_SMOOTHING + 
                          center.y * (1 - TEMPORAL_SMOOTHING);
        
        // 平滑半径
        float smoothedRadius = last.radius * TEMPORAL_SMOOTHING + 
                             radius * (1 - TEMPORAL_SMOOTHING);
        
        // 平滑得分
        double smoothedScore = last.score * TEMPORAL_SMOOTHING + 
                             score * (1 - TEMPORAL_SMOOTHING);
        
        return CircleInfo(smoothedCenter, smoothedRadius, smoothedScore);
    }

    // 修改后的validateContour函数，整合时序信息
    bool validateContour(const vector<Point>& contour, Point2f& outCenter, float& outRadius) {
        double total_score = 0.0;
        
        // 1. 面积特征评分
        double area = contourArea(contour);
        if (area < params.min_area || area > params.max_area)
            return false;
        double area_score = normalizeScore(area, params.min_area, params.max_area);
        total_score += area_score * weights.area_weight;

        // 2. 圆度特征评分
        if (contour.size() < 5) return false;
        RotatedRect ellipse = fitEllipse(contour);
        double major = max(ellipse.size.width, ellipse.size.height);
        double minor = min(ellipse.size.width, ellipse.size.height);
        double circularity = minor / major;
        
        double circularity_score = (circularity - 0.5) / (1.0 - 0.5);
        circularity_score = max(0.0, min(1.0, circularity_score));
        total_score += circularity_score * weights.circularity_weight;

        // 3. 颜色特征评分
        double color_score = calculateColorScore(contour);
        total_score += color_score * weights.color_weight;

        // 4. 梯度特征评分
        double gradient_score = calculateGradientScore(contour);
        total_score += gradient_score * weights.gradient_weight;

        // 5. 部分圆弧检测（对于不完整的球）
        if (total_score < weights.final_threshold) {
            vector<Point> approx;
            double epsilon = 0.02 * arcLength(contour, true);
            approxPolyDP(contour, approx, epsilon, true);
            
            if (approx.size() >= 5 && approx.size() <= 15) {
                double totalAngle = 0;
                for (size_t i = 1; i < approx.size() - 1; i++) {
                    Point v1 = approx[i] - approx[i-1];
                    Point v2 = approx[i+1] - approx[i];
                    double angle = abs(atan2(v1.cross(v2), v1.dot(v2)));
                    totalAngle += angle;
                }
                double avgCurvature = totalAngle / approx.size();
                if (avgCurvature > 0.3) {
                    total_score += avgCurvature * weights.circularity_weight;
                }
            }
        }

        // 如果通过基本验证
        if (total_score >= weights.final_threshold) {
            // 计算圆的参数
            RotatedRect ellipse = fitEllipse(contour);
            Point2f center = ellipse.center;
            float radius = (ellipse.size.width + ellipse.size.height) / 4.0f;
            
            // 检查时序一致性
            if (!isTemporallyConsistent(center, radius, total_score)) {
                return false;
            }
            
            // 应用时序平滑
            CircleInfo smoothed = smoothDetection(center, radius, total_score);
            
            // 更新输出参数
            outCenter = smoothed.center;
            outRadius = smoothed.radius;
            
            // 更新历史记录
            updateHistory(smoothed);
            
            return true;
        }
        
        return false;
    }

public:
    struct DetectionResult {
        Point2f center;
        float radius;
        vector<Point> contour;
        bool valid;
        double score;  // 添加得分字段
    };
    
    DetectionResult detect(const Mat& input) {
        frame = input.clone();
        DetectionResult result;
        result.valid = false;
        
        // 预处理
        preprocess();
        
        // 找到轮廓
        findContours(mask.clone(), contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);
        
        // 找到最佳轮廓
        double bestScore = 0;
        for (const auto& contour : contours) {
            Point2f center;
            float radius;
            if (validateContour(contour, center, radius)) {
                result.center = center;
                result.radius = radius;
                result.contour = contour;
                result.valid = true;
                result.score = bestScore;
                break;
            }
        }
        
        return result;
    }
    
    // 在drawResult中添加时序信息的可视化
    void drawResult(Mat& frame, const DetectionResult& result) {
        if (!result.valid)
            return;
            
        // 绘制当前检测结果
        drawContours(frame, vector<vector<Point>>{result.contour}, 0, Scalar(0, 255, 0), 2);
        circle(frame, result.center, result.radius, Scalar(0, 0, 255), 2);
        circle(frame, result.center, 3, Scalar(0, 0, 255), -1);
        
        // 绘制历史轨迹
        for (size_t i = 1; i < history.size(); i++) {
            if (history[i].valid && history[i-1].valid) {
                line(frame, history[i-1].center, history[i].center, 
                     Scalar(255, 0, 0), 2);
            }
        }
        
        // 添加文本信息
        putText(frame, 
                format("Radius: %.1f Score: %.2f", result.radius, result.score),
                Point(10, 30), FONT_HERSHEY_SIMPLEX, 1,
                Scalar(0, 255, 0), 2);
    }
    
    // 获取调试图像
    void getDebugImages(Mat& mask_out, Mat& edges_out) {
        mask_out = mask.clone();
        edges_out = edges.clone();
    }
    
    // 计算圆的得分
    float calculateCircleScore(const Mat& frame, const Vec3f& circle) {
        // 这里可以添加更复杂的评分机制
        // 例如：检查圆周边缘的梯度强度、颜色一致性等
        return 1.0;  // 简单示例
    }
    
    // 基本的圆有效性检查
    bool isBasicCircleValid(const Vec3f& circle) {
        float radius = circle[2];
        double area = M_PI * radius * radius;
        
        return (area >= params.min_area && 
                area <= params.max_area);
    }
};

int main() {
    // 添加命令行参数处理
    String image_path = "/home/wys/Desktop/Project/VisionProject/Opencv/images/origin/11.png"; // 图片路径
    cout << "请输入图片路径（直接回车使用摄像头）: ";
    getline(cin, image_path);

    Mat frame;
    VideoCapture cap;
    BasketballDetector detector;
    bool use_camera = image_path.empty();

    if (use_camera) {
        // cap.open("/home/wys/Desktop/Project/VisionProject/Opencv/images/BasketBall.mp4");
        cap.open(2);
        if (!cap.isOpened())
            return -1;
    } else {
        frame = imread(image_path);
        if (frame.empty()) {
            cout << "Error: Could not read the image." << endl;
            return -1;
        }
    }

    namedWindow("Controls", WINDOW_NORMAL);
    
    // 创建控制滑块
    createTrackbar("Lower H", "Controls", &params.lower_h, 180);
    createTrackbar("Lower S", "Controls", &params.lower_s, 255);
    createTrackbar("Lower V", "Controls", &params.lower_v, 255);
    createTrackbar("Upper H", "Controls", &params.upper_h, 180);
    createTrackbar("Upper S", "Controls", &params.upper_s, 255);
    createTrackbar("Upper V", "Controls", &params.upper_v, 255);
    
    // 图像预处理参数
    createTrackbar("Blur Size", "Controls", &params.blur_size, 21, nullptr);
    createTrackbar("CLAHE Clip", "Controls", &params.clahe_clip, 10);
    createTrackbar("CLAHE Grid", "Controls", &params.clahe_grid, 16);
    
    // Canny边缘检测参数
    createTrackbar("Canny Low", "Controls", &params.canny_low, 255);
    createTrackbar("Canny High", "Controls", &params.canny_high, 255);
    
    // 霍夫圆检测参数
    createTrackbar("Hough DP", "Controls", &params.hough_dp, 5);
    createTrackbar("Hough MinDist", "Controls", &params.hough_minDist, 200);
    createTrackbar("Hough Param1", "Controls", &params.hough_param1, 200, nullptr);
    createTrackbar("Hough Param2", "Controls", &params.hough_param2, 100, nullptr);
    createTrackbar("Min Radius", "Controls", &params.hough_minRadius, 100);
    createTrackbar("Max Radius", "Controls", &params.hough_maxRadius, 200);
    
    Mat mask_debug, edges_debug;
    while (true) {
        Mat display_frame;
        if (use_camera) {
            cap >> display_frame;
            if (display_frame.empty())
                break;
        } else {
            display_frame = frame.clone();
        }
            
        // 检测篮球
        auto result = detector.detect(display_frame);
        
        // 绘制结果
        detector.drawResult(display_frame, result);
        
        // 显示调试图像
        detector.getDebugImages(mask_debug, edges_debug);
        
        imshow("Frame", display_frame);
        imshow("Mask", mask_debug);
        imshow("Edges", edges_debug);
        
        char key = waitKey(use_camera ? 1 : 30);
        if (key == 27) {  // ESC键退出
            if (!use_camera) {
                // 输出当前阈值参数
                cout << "\n当前HSV阈值参数：" << endl;
                cout << "H: " << params.lower_h << " - " << params.upper_h << endl;
                cout << "S: " << params.lower_s << " - " << params.upper_s << endl;
                cout << "V: " << params.lower_v << " - " << params.upper_v << endl;
                
                cout << "\n预处理参数：" << endl;
                cout << "Blur Size: " << params.blur_size << endl;
                cout << "CLAHE Clip: " << params.clahe_clip << endl;
                cout << "CLAHE Grid: " << params.clahe_grid << endl;
                
                cout << "\nCanny参数：" << endl;
                cout << "Canny Low: " << params.canny_low << endl;
                cout << "Canny High: " << params.canny_high << endl;
                
                cout << "\n霍夫圆检测参数：" << endl;
                cout << "Hough DP: " << params.hough_dp << endl;
                cout << "Hough MinDist: " << params.hough_minDist << endl;
                cout << "Hough Param1: " << params.hough_param1 << endl;
                cout << "Hough Param2: " << params.hough_param2 << endl;
                cout << "Min Radius: " << params.hough_minRadius << endl;
                cout << "Max Radius: " << params.hough_maxRadius << endl;
            }
            break;
        }
    }
    
    return 0;
}